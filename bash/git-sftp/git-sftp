#!/usr/bin/env bash
#
# Copyright 2013 Mathieu Ledru
# https://github.com/matyo91/MatyoTools
#
# Permission  is  hereby granted, free of charge, to any person ob-
# taining a copy of  this  software  and  associated  documentation
# files  (the "Software"), to deal in the Software without restric-
# tion, including without limitation the rights to use, copy, modi-
# fy, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is  fur-
# nished to do so, subject to the following conditions:
# 
# The  above  copyright  notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF  ANY  KIND,
# EXPRESS  OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE  AND  NONIN-
# FRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER  IN  AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  THE
# SOFTWARE.
# 
# ------------------------------------------------------------
# Setup Environment
# ------------------------------------------------------------

# General config
readonly DEFAULT_PROTOCOL="sftp"
readonly LOCAL_PATH="/Volumes/git-sftp"
readonly SYSTEM="$(uname)"
readonly VERSION='0.1'

# ------------------------------------------------------------
# Defaults
# ------------------------------------------------------------
URL=""
REMOTE_PROTOCOL=""
REMOTE_HOST=""
REMOTE_USER=""
REMOTE_PASSWD=""
REMOTE_PATH=""
ACTION=""
LOG_CACHE=""
ERROR_LOG=""
declare -i VERBOSE=0
declare -i ARG_MAX=4096

# ------------------------------------------------------------
# Constant Exit Error Codes
# ------------------------------------------------------------
readonly ERROR_USAGE=2
readonly ERROR_MISSING_ARGUMENTS=3
readonly ERROR_UPLOAD=4
readonly ERROR_DOWNLOAD=5
readonly ERROR_GIT=6

# ------------------------------------------------------------
# Functions
# ------------------------------------------------------------

usage_long()
{
local pager=$(git config --get core.pager)
${GIT_PAGER:-${pager:-${PAGER:-less -FRSX}}} << EOF
USAGE
	git-sftp <action> [<options>] <url>


DESCRIPTION
	git-sftp does FTP the Git way.

	It uses sshfs to mount remote Git directory.
	Then push or pull Git changes.


ACTIONS
	. push
		Push git to remote git directory.

	. pull
		Pull git from remote git directory.

	. mount
		Mount remote git directory on desktop.

	. unmount
		Unmount remote git directory from desktop.

	. help
		Shows this help screen.


URL
	. SFTP (DEFAULT) host.example.com[:<port>][/<remote path>]
	. SFTP			 sftp://host.example.com[:<port>][/<remote path>]

OPTIONS
	-h, --help		 Shows this help screen.
	-u, --user		 FTP login name.
	-p, --passwd	 FTP password.
	-v, --verbose	 Verbose mode.
	-vv			     Very verbose or debug mode.
	--version		 Prints version.


EXAMPLES
	. git-sftp push -u john sftp://sftp.example.com:4445/public_sftp -p -v
	. git-sftp push -p -u john -v sftp.example.com:4445:/public_sftp

SET DEFAULTS
	. git config git-sftp.user john
	. git config git-sftp.url sftp.example.com
	. git config git-sftp.password secr3t


VERSION
	$VERSION
EOF
exit 0
}

usage() {
	echo "git-sftp <action> [<options>] <url>"
	exit $ERROR_USAGE
}

escape() {
	echo "$1" | sed 's/\([\.\+\$]\)/\\\1/g'
}

has() {
	local item=$1; shift
	echo " $@ " | grep -q " $(escape $item) "
}

ask_for_passwd() {
	echo -n "Password: "
	stty -echo > /dev/null 2>&1
	read REMOTE_PASSWD
	stty echo > /dev/null 2>&1
	echo ""
}

# Checks if last comand was successful
check_exit_status() {
	if [ $? -ne 0 ]; then
		print_error_and_die "$1, exiting..." $2
	fi
}

get_config() {
	[ -f '.git-sftp-config' ] && OUT="$(git config -f '.git-sftp-config' --get git-sftp.$1)"
	if [ $? -eq 0 ];
	then
		echo $OUT
		return 0
	fi
	OUT="$(git config --get git-sftp.$1)"
	if [ $? -eq 0 ];
	then
		echo $OUT
		return 0
	fi
	[ -n $2 ] && OUT=$2
	echo $OUT
}

# Simple log func
write_log() {
	if [ $VERBOSE -eq 1 ]; then
		echo "$(date): $1"
	else
		if [ -n "$LOG_CACHE" ]; then
			LOG_CACHE="$LOG_CACHE\n$(date): $1"
		else
			LOG_CACHE="$(date): $1"
		fi
	fi
}

write_error_log() {
	write_log $1
	if [ -n "$ERROR_LOG" ]; then
		ERROR_LOG="$ERROR_LOG\n: $1"
	else
		ERROR_LOG="$1"
	fi
}

print_error_log() {
	if [ -n "$ERROR_LOG" ]; then
		echo "Error log:"
		echo $ERROR_LOG
	fi
}

# Simple error printer
print_error_and_die() {
	if [ $VERBOSE -eq 0 ]; then
		echo "fatal: $1" >&2
	else
		write_log "fatal: $1"
	fi
	exit $2
}

# Simple info printer
print_info() {
	if [ $VERBOSE -eq 0 ]; then
		echo "$1"
	else
		write_log "$1"
	fi
}

get_protocol_of_url() {
	echo "$1" | tr '[:upper:]' '[:lower:]' | egrep '^(ftp|sftp|ftps|ftpes)://' | cut -d ':' -f 1
}

set_remote_host() {
	[ -z $URL ] && URL="$(get_config url)"
	REMOTE_HOST=$(expr "$URL" : ".*://\([[:alpha:]0-9\.-]*\).*")
	[ -z $REMOTE_HOST ] && REMOTE_HOST=$(expr "$URL" : "\([[:alpha:]0-9\.:-]*\).*")
	[ -z $REMOTE_HOST ] && print_error_and_die "Remote host not set." $ERROR_MISSING_ARGUMENTS
}

set_remote_protocol() {
	# Split protocol from url
	REMOTE_PROTOCOL=$(get_protocol_of_url "$URL")

	# Protocol found?
	if [ ! -z $REMOTE_PROTOCOL ]; then
		REMOTE_PATH=$(echo "$URL" | cut -d '/' -f 4-)
		return
	fi

	# Check if a unknown protocol is set, handle it or use default protocol
	local UNKNOWN_PROTOCOL=$(expr "$URL" : "\(.*:[/]*\).*")
	if [ -z $UNKNOWN_PROTOCOL ]; then
		write_log "Protocol not set, using default protocol $DEFAULT_PROTOCOL://."
		REMOTE_PROTOCOL=$DEFAULT_PROTOCOL
		echo "$URL" | egrep -q "/" && REMOTE_PATH=$(echo "$URL" | cut -d '/' -f 2-)
		return
	fi
	print_error_and_die "Protocol unknown '$UNKNOWN_PROTOCOL'." $ERROR_UNKNOWN_PROTOCOL
}

set_remote_user() {
	[ -z $REMOTE_USER ] && REMOTE_USER="$(get_config user)"
}

set_remote_password() {
	[ -z $REMOTE_PASSWD ] && REMOTE_PASSWD="$(get_config password)"
}

set_remotes() {
	set_remote_host
	write_log "Host is '$REMOTE_HOST'."

	set_remote_user
	write_log "User is '$REMOTE_USER'."

	set_remote_password
	if [ -z $REMOTE_PASSWD ]; then
		write_log "No password is set."
	else
		write_log "Password is set."
	fi 

	set_remote_protocol
	# Add begin slash
	REMOTE_PATH="/$REMOTE_PATH"
	
	write_log "Path is '$REMOTE_PATH'."
}

handle_action() {
	case "$ACTION" in
		push)
			action_push
			;;
		pull)
			action_pull
			;;
		mount)
			action_mount
			;;
		unmount)
			action_unmount
			;;
		*)
			print_error_and_die "Action unknown." $ERROR_MISSING_ARGUMENTS
			;;
	esac
}

remote_unmount() {
	if mount | grep $LOCAL_PATH ; then
		echo 'unmount'
		umount $LOCAL_PATH && sleep 1s;
	fi
}

remote_mount() {
	remote_unmount

	echo "mount sshfs $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH $LOCAL_PATH"
	
	mkdir $LOCAL_PATH
	sshfs $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH $LOCAL_PATH -o auto_cache -o reconnect -o defer_permissions -o negative_vncache -o workaround=rename -o volname="git-sftp"
}

remote_git_add() {
	if [[ $(git remote -v) != *"git-sftp"* ]] ; then
		$(git remote add git-sftp $LOCAL_PATH)
	fi
}

remote_git_push() {
	git push git-sftp master
}

remote_git_pull() {
	git pull git-sftp master
}

# ------------------------------------------------------------
# Actions
# ------------------------------------------------------------
action_push() {
	set_remotes
	remote_mount
	remote_git_add
	remote_git_push
	remote_unmount
}

action_pull() {
	set_remotes
	remote_mount
	remote_git_add
	remote_git_pull
	remote_unmount
}

action_mount() {
	set_remotes
	remote_mount
}

action_unmount() {
	set_remotes
	remote_mount
}

# ------------------------------------------------------------
# Main
# ------------------------------------------------------------
main() {
	handle_action
	print_error_log
	exit 0
}

# 2 args are needed: action and url
if [ $# = 0 ]; then
	usage;
fi

while test $# != 0
do
	case "$1" in
		push|pull|mount|unmount)
			ACTION="$1"
			;;
		-h|--h|--he|--hel|--help|help)
			usage_long
			;;
		-u|--user*)
			case "$#,$1" in
				*,*=*)
					REMOTE_USER=$(expr "z$1" : 'z-[^=]*=\(.*\)')
					;;
				1,*)
					REMOTE_USER="$USER"
					;;
				*)
					if ! echo "$2" | egrep -q '^-'; then
						REMOTE_USER="$2"
						shift
					else
						REMOTE_USER="$USER"
					fi
					;;
			esac
			;;
		-p|--passwd*)
			case "$#,$1" in
				*,*=*)
					REMOTE_PASSWD=$(expr "z$1" : 'z-[^=]*=\(.*\)')
					;;
				1,*)
					ask_for_passwd
					;;
				*)
					if ! echo "$2" | egrep -q '^-'; then
						REMOTE_PASSWD="$2"
						shift
					else
						ask_for_passwd
					fi
					;;
			esac
			;;
		-v|--verbose)
			VERBOSE=1
			[ -n "$LOG_CACHE" ] && echo -e $LOG_CACHE
			REMOTE_CMD_OPTIONS=""
			;;
		-vv)
			VERBOSE=1
			[ -n "$LOG_CACHE" ] && echo -e $LOG_CACHE
			REMOTE_CMD_OPTIONS="-v"
			;;
		--version|version)
			echo "git-ftp version $VERSION"
			exit 0
			;;
		*)
			# Pass thru anything that may be meant for fetch.
			[ -n "$1" ] && URL=$1
			;;
	esac
	shift
done
main
